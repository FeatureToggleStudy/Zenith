<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2017 George Belden

This file is part of Zenith.

Zenith is free software: you can redistribute it and/or modify it under the terms	of the GNU General Public License as published by the Free Software Foundation,	either version 3 of the License, or (at your option) any later version.
	
Zenith is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
	
You should have received a copy of the GNU General Public License along with Zenith. If not, see <http://www.gnu.org/licenses/>.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       		http://www.springframework.org/schema/beans/spring-beans.xsd
       		http://www.springframework.org/schema/context
       		http://www.springframework.org/schema/context/spring-context.xsd
       		http://www.springframework.org/schema/data/mongo
            http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">

	<!-- Needed to make the @Required annotation to work -->
	<context:annotation-config />

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:model.properties</value>
		</property>
	</bean>

	<mongo:mongo host="${mongodb.host}" port="${mongodb.port}" />
	<mongo:db-factory dbname="${mongodb.database}" />

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg name="mongoDbFactory" ref="mongoDbFactory" />
		<property name="writeResultChecking" value="EXCEPTION"/>
		<property name="writeConcern" value="JOURNALED" />
	</bean>

	<bean class="com.ciphertool.zenith.model.etl.importers.LetterNGramMarkovImporter" id="letterNGramMarkovImporter">
		<property name="order" value="${markov.letter.order}" />
		<property name="corpusDirectory" value="${corpus.output.directory}" />
		<property name="taskExecutor" ref="taskExecutor" />
		<property name="nGramCountSumDao" ref="nGramCountSumDao" />
		<property name="computeConditionalProbability" value="${compute.conditional.probability.enabled}" />
	</bean>

	<bean class="com.ciphertool.zenith.model.dao.LetterNGramDao" id="letterNGramDao">
		<property name="mongoTemplate" ref="mongoTemplate" />
		<property name="batchSize" value="${mongodb.parallelScan.batchSize}" />
		<property name="numCursors" value="${mongodb.parallelScan.numCursors}" />
		<property name="collectionWithSpaces" value="${collection.letter.ngram.with.spaces.name}" />
		<property name="collectionWithoutSpaces" value="${collection.letter.ngram.without.spaces.name}" />
	</bean>

	<bean class="com.ciphertool.zenith.model.dao.LetterNGramDao" id="maskedNGramDao">
		<property name="mongoTemplate" ref="mongoTemplate" />
		<property name="batchSize" value="${mongodb.parallelScan.batchSize}" />
		<property name="numCursors" value="${mongodb.parallelScan.numCursors}" />
		<property name="collectionWithSpaces" value="${collection.masked.ngram.with.spaces.name}" />
		<property name="collectionWithoutSpaces" value="${collection.masked.ngram.without.spaces.name}" />
	</bean>

	<bean class="com.ciphertool.zenith.model.dao.NGramCountSumDao" id="nGramCountSumDao">
		<property name="mongoTemplate" ref="mongoTemplate" />
		<property name="collectionName" value="${collection.ngram.count.sum.name}" />
	</bean>

	<bean class="com.ciphertool.zenith.model.etl.persisters.NGramPersister" id="nGramPersister">
		<property name="letterNGramMarkovImporter" ref="letterNGramMarkovImporter" />
		<property name="letterNGramDao" ref="letterNGramDao" />
		<property name="maskedNGramDao" ref="maskedNGramDao" />
		<property name="letterNGramsWithSpacesEnabled" value="${letter.ngrams.with.spaces.enabled}" />
		<property name="letterNGramsWithoutSpacesEnabled" value="${letter.ngrams.without.spaces.enabled}" />
		<property name="maskedNGramsWithSpacesEnabled" value="${masked.ngrams.with.spaces.enabled}" />
		<property name="maskedNGramsWithoutSpacesEnabled" value="${masked.ngrams.without.spaces.enabled}" />
		<property name="batchSize" value="${mongodb.parallelScan.batchSize}" />
	</bean>

	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${taskExecutor.poolSize.override:#{T(java.lang.Runtime).getRuntime().availableProcessors()}}" />
		<property name="maxPoolSize" value="${taskExecutor.poolSize.override:#{T(java.lang.Runtime).getRuntime().availableProcessors()}}" />
		<!-- queueCapacity should be the same as populationSize, or we will get 
			rejected execution exceptions -->
		<property name="queueCapacity" value="${taskExecutor.queueCapacity}" />
		<property name="keepAliveSeconds" value="5" />
		<property name="allowCoreThreadTimeOut" value="true" />
	</bean>
</beans>