#
# Copyright 2017-2019 George Belden
# 
# This file is part of Zenith.
# 
# Zenith is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# Zenith is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# Zenith. If not, see <http://www.gnu.org/licenses/>.
#

# Since we depend on spring-boot-starter-web, don't start the embedded web server (e.g. Tomcat)
spring.main.web-application-type=NONE

# The file on the classpath which contains any number of ciphers specified as JSON objects
cipher.repository-filename=ciphers.json
# The name of a particular cipher within the ciphers.json file (zodiac408 and zodiac340 are provided)
cipher.name=zodiac408

# The language model file to use (CSV only) which should exist in the same directory where the application is run from
language-model.filename=zenith-model.csv
# The language model zip file on the classpath which will be unzipped if language-model.filename does not exist
language-model.archive-filename=zenith-model.zip

# Order of the Markov model (essentially the n-gram size)
markov.letter.order=5

# The PlaintextEvaluator implementation class name to use
decipherment.evaluator.plaintext=MarkovModelPlaintextEvaluator
# The KnownPlaintextEvaluator implementation class name to use, ignored if decipherment.use-known-evaluator is set to false, and required if decipherment.use-known-evaluator is set to true
decipherment.evaluator.known-plaintext=Zodiac408KnownPlaintextEvaluator
# The number of times to run the hill climbing algorithm (essentially the number of random restarts)
decipherment.epochs=10
# The number of rounds of sampling to perform per epoch (A round of sampling can itself perform any number of samples depending on the algorithm)
decipherment.sampler.iterations=5000
# Whether to sample each ciphertext mapping randomly per sampler iteration (when false, the ciphertext mappings will be sampled in order)
decipherment.sampler.iterate-randomly=false
# Annealing temperature at the beginning of each epoch
decipherment.annealing.temperature.max=8
# Annealing temperature at the end of each epoch
decipherment.annealing.temperature.min=5
# Temperatures which seem to work sufficiently for hill climbing on quadrants of the cipher
#decipherment.annealing.temperature.max=5
#decipherment.annealing.temperature.min=1
# If the cipher has a known solution, this controls whether to also evaluate it against the known solution (primarily for debugging purposes)
decipherment.use-known-evaluator=false
# A String representation of a column key used as a transposition key during encipherment (case-insensitive, ignored if decipherment.transposition.column-key is specified)
decipherment.transposition.column-key-string=
# A comma-separated integer array representation of a column key used as a transposition key during encipherment
decipherment.transposition.column-key=
# The number of times to perform transposition with the given key
decipherment.transposition.iterations=1
# A comma-separated list of names of transformers to use to mutate the cipher, in order
decipherment.transformers.list=RemoveLastRowCipherTransformer

# The URL for the LSTM network REST service, required only if decipherment.evaluator.plaintext is set to LstmNetworkPlaintextEvaluator
lstm.service-url=